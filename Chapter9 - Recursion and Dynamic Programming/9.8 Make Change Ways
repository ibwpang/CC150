class Solution {
    /**
    * Approach #1. Recursion. Exhaustive Search.
    */
    public int change(int amount, int[] coins) {
        Arrays.sort(coins);
        return helper(coins, amount, coins.length - 1);
    }
    
    public int helper(int[] coins, int amount, int pos) {
        // If n is 0 then there is 1 solution (do not include any coin)
        if (amount == 0) {
            return 1;
        }
        // If n is less than 0 then no solution exists
        if (amount < 0) {
            return 0;
        }

        // If there are no coins and n is greater than 0, then no solution exist
        if (pos < 0 && amount > 0) {
            return 0;
        }

        // count is sum of solutions: (i) including S[m], (ii) excluding S[m]
        return helper(coins, amount - coins[pos], pos) + helper(coins, amount, pos - 1);
    }
}
